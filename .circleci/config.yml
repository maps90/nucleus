# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.10
    environment:
      - GOCACHE: "/tmp/go/cache"
      - DEP_VERSION: 0.4.1
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/maps90/nucleus
    steps:
      - checkout
      - restore_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/maps90/nucleus/vendor
      # specify any bash command here prefixed with `run: `
      - run:
          name: download-libraries
          command: |
            if [ ! -d /go/src/github.com/maps90/nucleus/vendor ]; then
                curl -L -s https://github.com/golang/dep/releases/download/v${DEP_VERSION}/dep-linux-amd64 -o /go/bin/dep
                chmod +x /go/bin/dep
                /go/bin/dep ensure
            fi
      - save_cache:
          key: gopkg-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
          paths:
              - /go/src/github.com/maps90/nucleus/vendor
      - restore_cache:
          keys:
              - build-cache-{{ .Branch }}-{{ .Environment.CIRCLE_PREVIOUS_BUILD_NUM }}
          paths:
              - /tmp/go/cache
      - run:
          name: Build
          command: |
            mkdir -p $GOCACHE
            go build -v
      - run:
          name: Gathering Coverage Information
          command: |
            set -e
            echo "" > coverage.txt

            for d in $(go list ./... | grep -v vendor); do
                go test -race -coverprofile=profile.out -covermode=atomic $d
                if [ -f profile.out ]; then
                    cat profile.out >> coverage.txt
                    rm profile.out
                fi
            done
      - save_cache:
          key: build-cache-{{ .Branch }}-{{ .Environment.CIRCLE_BUILD_NUM }}
          paths:
              - /tmp/go/cache
      - run:
          name: Send Coverage Information to Codecov
          command: bash <(curl -s https://codecov.io/bash)
      